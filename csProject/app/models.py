from .extensions import db
from flask_dance.consumer.backend.sqla import OAuthConsumerMixin
from flask_login import UserMixin

class User(UserMixin, db.Model):
	''' Identifies individual users by their username '''
	id = db.Column(db.Integer, primary_key=True, unique=True, autoincrement=True)
	username = db.Column(db.String(45), unique=True)

	def __repr__(self):
		return '<user %r>' % self.username

class OAuth(OAuthConsumerMixin, db.Model):
	''' OAuth information from Flask Dance and GitHub (autogenerated). Includes user's GitHub API token '''
	user_id = db.Column(db.Integer, db.ForeignKey(User.id))
	user = db.relationship(User)

class Code_Climate(db.Model):
	''' Information about a single repository version on code climate '''
	id = db.Column(db.String(80), primary_key=True, unique=True)
	archive_id = db.Column(db.Integer, db.ForeignKey('archive.id'))
	github_slug = db.Column(db.String(150))
	timestamp = db.Column(db.String(10))
	snapshot = db.Column(db.String(150))
	badge_token = db.Column(db.String(150))
	lines_of_code = db.Column(db.Integer)
	issues_count = db.Column(db.Integer)
	issues_remediation = db.Column(db.String(50))
	tech_debt_ratio = db.Column(db.String(10))
	tech_debt_implementation = db.Column(db.String(50))
	tech_debt_remediation = db.Column(db.String(50))

	archive = db.relationship('Archive')

class Archive(db.Model):
	''' Information about a single version of an archived repository '''
	id = db.Column(db.Integer, primary_key=True, unique=True, autoincrement=True)
	url = db.Column(db.String(150))
	owner = db.Column(db.String(150))
	name = db.Column(db.String(150))
	github_slug = db.Column(db.String(150))
	timestamp = db.Column(db.String(10))
	language = db.Column(db.String(30))
	archive_folder = db.Column(db.String(150))

	code_climate = db.relationship("Code_Climate", backref="origin", uselist=False)
	ck = db.relationship("CK", backref="origin", uselist=False)
	stats = db.relationship("Github_Stats", backref="origin", uselist=False)
	
class Github_Stats(db.Model):
	''' Statistics extracted from GitHub API between 2 dates '''
	id = db.Column(db.Integer, primary_key=True, unique=True, autoincrement=True)
	archive_id = db.Column(db.Integer, db.ForeignKey('archive.id'))
	slug = db.Column(db.String(150))
	from_ = db.Column(db.String(30))
	to = db.Column(db.String(30))
	avg_monthly_commits = db.Column(db.Float)
	contributors = db.Column(db.Integer)

	archive = db.relationship('Archive')

class CK(db.Model):
	''' Project-level CK metrics and calculated quality score '''
	id = db.Column(db.Integer, primary_key=True, unique=True, autoincrement=True)
	archive_id = db.Column(db.Integer, db.ForeignKey('archive.id'))
	classes = db.Column(db.Integer)
	cbo = db.Column(db.Float)
	wmc = db.Column(db.Float)
	dit = db.Column(db.Float)
	rfc = db.Column(db.Float)
	lcom = db.Column(db.Float)
	quality_score = db.Column(db.Float)

	archive = db.relationship("Archive", backref="origin", uselist=False)
	ck_class = db.relationship("CK_Class", backref="origin", uselist=False)
	
	def __repr__(self):
		return {'classes': self.classes, 'cbo': self.cbo, 'wmc': self.wmc, 'dit': self.dit, 
		'rfc': self.rfc, 'lcom': self.lcom, 'quality_score': self.quality_score }

class CK_Class(db.Model):
	''' CK metrics calculated for every class in a project '''
	id = db.Column(db.Integer, primary_key=True, unique=True, autoincrement=True)
	ck_id = db.Column(db.Integer, db.ForeignKey('CK.id'))
	name = db.Column(db.String(300))
	cbo = db.Column(db.Integer)
	wmc = db.Column(db.Integer)
	dit = db.Column(db.Integer)
	rfc = db.Column(db.Integer)
	lcom = db.Column(db.Integer)

	ck = db.relationship("CK")
	
	def __repr__(self):
		return {'cbo': self.cbo, 'wmc': self.wmc, 'dit': self.dit, 'rfc': self.rfc, 'lcom': self.lcom }
